#!/bin/bash

# http://askubuntu.com/questions/15853/how-can-a-script-check-if-its-being-run-as-root
if [[ $EUID -ne 0 ]]; then
   echo "This script must be run as root" 
   exit 1
fi

# set -x #echo on

###############################################
# First we just set the $SLOTS variable and load the DTOs and GPIOs.

# $ export SLOTS=$(find /sys/devices -name slots)
# $ echo am33xx_pwm > $SLOTS
# $ echo bone_pwm_P8_34 > $SLOTS
# $ echo bone_eqep1 > $SLOTS
# $ echo 70 > /sys/class/gpio/export
# $ echo 73 > /sys/class/gpio/export



# Ensure $SLOTS is defined
# http://stackoverflow.com/questions/3601515/how-to-check-if-a-variable-is-set-in-bash
if [ -z ${SLOTS+x} ]; then 
    echo "SLOTS is unset, setting it"; 
    export SLOTS=$(find /sys/devices -name slots)
else 
    echo "SLOTS is already set to '$SLOTS', good."; 
fi


# Ensure the relevant device-tree overlays are loaded
for dto in bone_pwm_P8_34 am33xx_pwm bone_eqep1; do
    if grep --quiet $dto $SLOTS; then
	echo "$dto in $SLOTS, good"
    else
	echo "$dto not in $SLOTS, loading it..."
	echo "dmesg before load:"
	dmesg | tail 
	echo $dto > $SLOTS
	echo "dmesg after load:"
	dmesg | tail
    fi
done 



# Load the GPIOs if they're not there.

pushd /sys/class/gpio/
for n in 70 73; do
    if [ ! -d "gpio$n" ]; then
	echo "Hm, GPIO $n not loaded? I'll load it."
	echo $n > /sys/class/gpio/export
    fi
    echo "out" > "/sys/class/gpio/gpio$n/direction" # set as an output
done
popd


###############################################

# Make some #defines for the various sysfs entries that will be #included by the bb-simple-sysfs-c-lib.h.

# The goal is to make a .h file like:
# #define PWM_PATH           "/sys/devices/ocp.3/pwm_test_P8_34.18/"
# #define GPIO_MOTORDIR_PATH "/sys/class/gpio/gpio70/"
# #define GPIO_STBY_PATH     "/sys/class/gpio/gpio73/"
# #define EQEP_PATH          "/sys/devices/ocp.3/48302000.epwmss/48302180.eqep/"

# However, this file must be re-generated each boot, because
# the sysfs path names change slightly from boot to boot; for example:
# #define PWM_PATH           "/sys/devices/ocp.3/pwm_test_P8_34.18/"
# #define PWM_PATH           "/sys/devices/ocp.3/pwm_test_P8_34.12/"


# set -x # echo on

fname="sysfs-paths.h"
echo "Finding sysfs entries, inserting into $fname ..."
echo "// THIS FILE ($fname) IS AUTOMATICALLY GENERATED BY $0" > $fname
echo "#ifndef SYSFS_PATHS_H" >> $fname
echo "#define SYSFS_PATHS_H" >> $fname
echo "#define PWM_PATH \"$(find /sys/devices -type d -name 'pwm_test_P8_34*')/\"" >> $fname
echo "#define GPIO_MOTORDIR_PATH \"/sys/class/gpio/gpio70/\"" >> $fname
echo "#define GPIO_STBY_PATH     \"/sys/class/gpio/gpio73/\"" >> $fname
echo "#define EQEP_PATH \"$(find /sys/devices -type d -name '*.eqep')/\"" >> $fname
echo "#endif // header guard" >> $fname
echo "Here's $fname :"
cat $fname





#############################################################
# Compile

gcc -g -c bb-simple-sysfs-c-lib.c -lm 
gcc -g -c tests.c                 -lm 

gcc -g bb-simple-sysfs-c-lib.o tests.c main.c -o main -lm


#############################################################
# Run

./main

